/**
 * Konoha6 (Chibi Konoha) Grammar
 *
 * Authors:
 *   Kimio Kuramitsu (https://github.com/kkuramitsu/)
 */

/* Starting Point */

File = _  { ($Statement _)* #Block } EOF

/* Code Layout (Whitespace) */

_            = ( S / BLOCKCOMMENT / LINECOMMENT )*
__           = ( S / BLOCKCOMMENT / LINECOMMENT )+
S            = [ \t\n\r]
BLOCKCOMMENT = '/*' ( !'*/' . )* '*/'
             / '(*' ( !'*)' . )* '*)'
LINECOMMENT  = '//' ( !EOL . )* EOL
EOF          = !.
EOL          = ('\r'? '\n') / EOF

/* Token */

"{" = '{' _
"}" = '}' _
"[" = '[' _
"]" = ']' _
"(" = '(' _
")" = ')' _
"=" = '=' !'=' _
"," = ',' _
";" = (';' _)+
":" = ':' _

/* Identifier */

Identifier = { NAME [']* #NameExpr } _
           / '(' { OPNAME #NameExpr } ')' _
NAME       = [a-zA-Z_\x80-\xF7] W*
W          = [a-zA-Z0-9\x80-\xF7]

OPNAME =
	/ '++'  / '+'
	/ '-->' / '->' / '--' / '-'
	/ '**'  / '*'
	/ '^^'  / '^'
	/ '/'
	/ '%'
	/ '&&&' / '&&' / '&'
	/ '|||' / '||' / '|'
	/ '===' / '==>' / '==' / '=>'
	/ '!='  / '!'
	/ '>='  / '>'
	/ '<='  / '<'
	/ '::'
	/ '~'

example Identifier abc
example Identifier (+)

/* Type */

example Type String
example Type ()
example Type Dict[Int]
example Type () -> int
example Type int -> int -> int
example Type (int, int)
example Type {name, age}

Type =
	PrimaryType (
	    base:^ { "[" $params(Types) "]" #ParamType }
	    / base:^ { '->' _ type: Type #FuncType }
	)*

PrimaryType =
	{ 'typeof' "(" expr: Expression ")" #ExprType }
	/ TupleType
	/ DataType
	/ BaseType

BaseType = !TKEYWORD TypeName

TKEYWORD
	= 'public' !W
	/ 'let' !W

TypeName = {
	[A-Za-z$\x80-\xF7]	[A-Za-z0-9/.\x80-\xF7]* [']*
	#BaseType
} _

TupleType = {
	"(" ( $Type ("," $Type)* )? ")"
	#TupleType
}

Types = {
	( $Type ("," $Type)* )?
}

DataType =  {
    "{"
	($(Identifier) ("," $(Identifier))*)?
	"}"
	#DataType
}

/* Statement */

Statement =
    / Decorator
	/ LetDecl
	/ AssumeDecl
	/ FuncDecl
	/ Expression

/* Decorator */

example Decorator, Statement '''
@contract(MyCoin)
f(x) = x + 1
'''

Decorator = {
    '@' name: Identifier
    ("(" params: Params ")")?
    body: Statement
    #Decorator
}

/* AssumeDecl */

example AssumeDecl, Statement '''
assume x,y,z : Float
'''

AssumeDecl = {
  'assume' __
  names: Names
  ":"
  type: Type
  #AssumeDecl
}

Names = {
  $Identifier ("," $Identifier)*
}

/* LetDecl */

LetDecl = {
	'let' __
	name: Identifier
	(":" type: Type)?
	"="
	expr: Expression
	#LetDecl
}

/* FuncDecl */

example FuncDecl, Statement '''
f(x) = x + 1
'''

FuncDecl = {
	name: Identifier
	"(" params: Params ")"
    (":" type: Type)?
    "="
    body: (FuncCase / Expression)
	#FuncDecl
}

Params = {
	($Param ( "," $Param )* )?
}

Param = {
	name: Identifier
    (":" type: Type)?
    #Param
}

example FuncDecl, Statement '''
gcd(x,y) =
    | x                 if y == 0
    | gcd(y, x % y)
'''

FuncMatch = {
    $FuncCase   ($(FuncCase))+
    #FuncMatch
}
FuncCase = {
    '|' _ expr: Expression ('if' _ case: Expression / 'otherwise' _)?
    #FuncCase
}

ReturnStmt = {
	'return' __ expr: Expression
	#ReturnStmt
}

/* Expression */

example FuncExpr, Expression \x x+1
example FuncExpr, Expression \x \y x+y

example IfExpr, Expression if(a > b) a + b else a - b
example IfExpr, Expression if(a < b) then a * b else a / b
example Expression true && false || !true
example Expression a == (b%2)^(c|1)
example Expression f(1,2)
example Expression d.name
example Expression d.f(1,2)

Expression =
    / BlockExpr
	/ FuncExpr
	/ IfExpr
	/ Operator

/* Expression */

BlockExpr = {
	"{"
	($Statement _)*
	"}"
	#BlockExpr
}

IfExpr = {
    'if' _ cond: Expression
    ('then' __)? then: Expression
    ('else' __ else: Expression)?
	#IfExpr
}

/* FuncExpr */

FuncExpr = {
  '\\'
  params: LParams
  ('->' _)?
  right: Expression
  #FuncExpr
}

LParams = {
  ($(Param) ('\\' $Param)* / '()')
}

/* Operator */

Operator =
	AndExpr (left:^ { name: { OR #OperatorExpr } _ right: AndExpr #Infix })*

OR = '||' !'|'

AndExpr =
	EqExpr (left:^ { name: { AND #OperatorExpr } _ right: EqExpr #Infix })*

AND = '&&' !'&'

EqExpr =
	SumExpr (left:^ { name: { EQ #OperatorExpr } _ right: SumExpr #Infix })*

EQ =
	/ '==' !'='
	/ '!=' !'='
	/ '<=' !'='
	/ '>=' !'='
	/ '<'  !'<'
	/ '>'  !'>'

SumExpr =
	ProdExpr (left:^ { name: { SUM #OperatorExpr } _ right: ProdExpr #Infix })*

SUM =
	/ '++'
	/ '+'
	/ '-' !'>'
	/ '|' !'|'

ProdExpr =
	UnaryExpr (left:^ { name: { PROD #OperatorExpr } _ right: UnaryExpr #Infix })*

PROD =
	/ '/'
	/ '*'
	/ '%'
	/ '^'
	/ '<<'
	/ '>>'
	/ '&' !'&'

UnaryExpr
	= { name: {PRE} _ expr: UnaryExpr #Unary }
    / SuffixExpr

PRE =
    / '-' !'-'
    / '!'
    / '~'
    / '+'

SuffixExpr =
	Primary (
	    recv:^ { '.' _ name: Identifier "(" $params(Expressions) ")" #MethodExpr }
	    / recv:^ { '.' _ name: Identifier #GetExpr }
	    / recv:^ { "(" params: Expressions ")" #ApplyExpr }
	    / recv:^ { '_(' _ params: Expressions "]" #IndexExpr }
	    / recv:^ { "[" type: Type "]" #CastExpr }
	)*

Expressions = {
	($Expression)? ( "," $Expression )*
}

/* Primary */

example Primary, Expression (1,2) //
example Primary, Expression (1)
example Primary, Expression () //
example Primary, Expression [1,2,3]
example Primary, Expression { name: 'naruto', age: 17 }
example Primary, Expression {"name": 'naruto', "age": '17'}

Primary =
  /	GroupExpr
  / ListExpr
  / DataExpr
  / Constant
  / Identifier

GroupExpr = { "(" ($Expression ("," $Expression)*)?  ")" #TupleExpr }

ListExpr = { "[" ($Expression ("," $Expression)*)? ","?  "]" #ListExpr }

DataExpr = { "{" ($KeyValue ("," $KeyValue)*) / (':' _) ","? "}" #DataExpr }

KeyValue = {
	name: (Identifier/StringExpr)
	':' _
	value: Expression
}

/* Literal */

Constant =
    / TripleExpr
	/ StringExpr
	/ CharExpr
	/ FloatExpr
	/ IntExpr
	/ TrueExpr
	/ FalseExpr
	/ NullExpr

example StringExpr, Expression "\n\u1234a\0"
example CharExpr, Expression '\''
example IntExpr, Expression 0177
example IntExpr, Expression 0b1010_1010
example IntExpr, Expression 0xdeadbeaf
example IntExpr, Expression 0L
example FloatExpr, Expression 1.1e-9
example TrueExpr, Expression true

TripleExpr =
	'\'\'\'' { $(TemplateContent)* #TemplateExpr } '\'\'\''

TemplateContent =
	'${' Expression '}'
	/ { (!'\'\'\'' !'${' .)* #StringExpr }

StringExpr = '"' { STRING_CONTENT* #StringExpr } '"' _
CharExpr = '\'' { CHAR_CONTENT* #CharExpr } '\'' _
STRING_CONTENT = ESCAPE / ![\"\n\\] .
CHAR_CONTENT   = ESCAPE / !['\n\\] .
ESCAPE =
	'\\' ['\"\\bfnrt]
	/ '\\' [0-3] [0-7] [0-7]
    / '\\' [0-7] [0-7]
    / '\\' [0-7]
	/ '\\' 'u'+ HEX HEX HEX HEX

IntExpr = {
	(DECIMAL / HEXADECIMAL / BINARY / OCTAL)
	#IntExpr
} (left:^ { $right(Var1) #MulExpr })* _

DECIMAL = '0' ![bBxX0-9_] / [1-9] ( '_'* DIGIT )*
HEXADECIMAL = '0' [xX] HEX ( '_'* HEX )*
BINARY = '0' [bB] [01] ( '_'* [01] )*
OCTAL = '0' ( '_'* [0-7] )*
DIGIT = [0-9]
HEX = [a-fA-F0-9]
LONG_SUFFIX = [lL]

FloatExpr = {
	FLOAT #DoubleExpr
} (left:^ { $right(Var1) #MulExpr })* _

Var1  = { [A-Za-z] [0-9]? [']* #NameExpr }  // xy => x * y
      / '(' _ Expression ')'                // 2(n+1) => 2 * (n+1)

FLOAT =
	FRACTION EXPONENT?
    / DIGIT+ EXPONENT

FRACTION =
	!'_' ( '_'* DIGIT )* '.' DIGIT ( '_'* DIGIT )*
    / DIGIT ( '_'* DIGIT )* '.' !'.'

EXPONENT =
	[eE] [+\-]? DIGIT ( '_'* DIGIT )*

TrueExpr  = { [Tt] 'rue' !W  #TrueExpr } _
FalseExpr = { [Ff] 'alse' !W #FalseExpr } _
NullExpr  = { [Nn] ('ull' / 'one' / 'il' / 'ULL' / 'othing' ) #NullExpr } _


/* CodeMap */

OrigamiFile = _ { ($Origami _)* #Block } EOF

Origami =
    / CodeInclude
    / CodeRequire
    / CodeMap

CodeInclude = {
    'include' __ file: Code
    #Include
}

CodeRequire = {
    'require' __ file: Code
    #Require
}

CodeMap = {
    name: Signature
    (":" type: Type)?
    (('->' / '=') _ expr: (StringExpr / Code))?
    (delim: StringExpr)?
    #CodeMap
}

Signature = {
    '#'?
    (OPNAME / NAME )
    ('@' DIGIT+ )?
    #Name
} _

Code = {
    ( !EOL . )*
} EOL _

example CodeMap +@2 : (Int,Int)->Int = (%1+%2)
example CodeMap +@2 : (Int,Int)->Int
example CodeMap +@2 = (%1+%2)
example CodeMap + = (%1+%2)
example CodeMap + = "(%*)" ","

example OrigamiFile '''
+@2 : (Int,Int)->Int = (%1+%2)
+@2 : (Int,Int)->Int
+@2 = (%1+%2)
'''
